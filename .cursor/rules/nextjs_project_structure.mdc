---
description: Guidelines for Next.js App Router project structure
globs: **/*.ts, **/*.tsx, **/*.js, **/*.jsx
alwaysApply: true
---
# Specify the following for Cursor rules
description: Guidelines for Next.js App Router project structure
globs: "**/*.ts, **/*.tsx, **/*.js, **/*.jsx"
---

# Next.js App Router Project Structure

## Overview

Next.js App Router uses a file-system based router where folders define routes and special files define UI and behavior. Understanding the correct project structure is essential for building maintainable Next.js applications.

## ðŸš¨ CRITICAL FILES AND CONVENTIONS ðŸš¨

1. **Root Layout** (`app/layout.tsx`): REQUIRED for all applications
2. **Page Files** (`page.tsx`): Required to make a route segment publicly accessible
3. **Route Groups** (`(folderName)`): Parentheses indicate organizational folders that don't affect URL paths
4. **Dynamic Segments** (`[id]`, `[...slug]`): Square brackets create dynamic routes

## Top-Level Files/Folders

```
project-root/
â”œâ”€â”€ app/                  # Main application code with App Router
â”œâ”€â”€ components/           # Shared components
â”œâ”€â”€ lib/ or utils/        # Utility functions and shared code
â”œâ”€â”€ styles/               # Global styles
â”œâ”€â”€ public/               # Static assets
â”œâ”€â”€ middleware.ts         # Edge middleware
â”œâ”€â”€ next.config.js        # Next.js configuration
â”œâ”€â”€ package.json          # Project dependencies
â””â”€â”€ tsconfig.json         # TypeScript configuration
```

## App Folder Structure

```
app/
â”œâ”€â”€ layout.tsx            # Root layout (required)
â”œâ”€â”€ page.tsx              # Home page (/)
â”œâ”€â”€ global-error.tsx      # Global error handling
â”œâ”€â”€ not-found.tsx         # Custom 404 page
â”œâ”€â”€ api/                  # API routes
â”‚   â””â”€â”€ [...]/
â”‚       â””â”€â”€ route.ts      # Route handlers
â”œâ”€â”€ (grouping)/           # Route group (won't affect URL)
â”‚   â””â”€â”€ [...]/
â”œâ”€â”€ [dynamic]/            # Dynamic route
â”‚   â””â”€â”€ page.tsx          # Dynamic page
â””â”€â”€ dashboard/            # Regular route (/dashboard)
    â”œâ”€â”€ layout.tsx        # Dashboard layout
    â”œâ”€â”€ page.tsx          # Dashboard page
    â”œâ”€â”€ loading.tsx       # Loading UI
    â””â”€â”€ error.tsx         # Error boundary
```

## Special Files

| File           | Purpose                                        |
|----------------|------------------------------------------------|
| `layout`       | Shared UI for a segment and its children       |
| `page`         | UI for a route and makes it publicly accessible|
| `loading`      | Loading UI for a segment                       |
| `error`        | Error UI for a segment                         |
| `not-found`    | UI for 404 errors                              |
| `route`        | API endpoint                                   |
| `template`     | Similar to layout but creates a new instance   |
| `default`      | Fallback UI for parallel routes                |
| `global-error` | Global error UI                                |

## Component Organization

```
components/
â”œâ”€â”€ ui/                   # Reusable UI components
â”‚   â”œâ”€â”€ button.tsx
â”‚   â””â”€â”€ card.tsx
â”œâ”€â”€ forms/                # Form-related components
â”‚   â”œâ”€â”€ login-form.tsx
â”‚   â””â”€â”€ register-form.tsx
â””â”€â”€ layouts/              # Layout components
    â”œâ”€â”€ sidebar.tsx
    â””â”€â”€ navbar.tsx
```

## Client vs. Server Components

By default, all components in Next.js App Router are Server Components. To use Client Components, add the `'use client'` directive at the top of the file:

```tsx
'use client';

import { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  );
}
```

## Best Practices

1. **Co-location**: Keep related files close to where they're used
2. **Partial Rendering**: Leverage nested layouts for performance
3. **Route Groups**: Use route groups for organization without affecting URLs
4. **Clear Separation**: Maintain clear separation between client and server code
5. **Feature-Based Organization**: Consider grouping by feature for large applications

## Common Patterns

1. **Feature Folders**:
   ```
   app/
   â”œâ”€â”€ (features)/
   â”‚   â”œâ”€â”€ authentication/
   â”‚   â”œâ”€â”€ billing/
   â”‚   â””â”€â”€ settings/
   ```

2. **Auth-Protected Routes**:
   ```
   app/
   â”œâ”€â”€ (public)/
   â”‚   â”œâ”€â”€ login/
   â”‚   â””â”€â”€ register/
   â”œâ”€â”€ (protected)/
   â”‚   â”œâ”€â”€ dashboard/
   â”‚   â””â”€â”€ settings/
   ```

3. **API Organization**:
   ```
   app/
   â”œâ”€â”€ api/
   â”‚   â”œâ”€â”€ users/
   â”‚   â”‚   â””â”€â”€ route.ts
   â”‚   â”œâ”€â”€ auth/
   â”‚   â”‚   â””â”€â”€ [...nextauth]/
   â”‚   â”‚       â””â”€â”€ route.ts
   â”‚   â””â”€â”€ webhooks/
   â”‚       â””â”€â”€ stripe/
   â”‚           â””â”€â”€ route.ts
   ``` 